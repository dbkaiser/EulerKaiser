package com.dbk.puzzle;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

/**
 * How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
 * 
 * @author edogboo
 *
 */
public class Puzzle29 {
	
	public static int bound = 100;
	public static boolean[][] board = new boolean[bound+1][bound+1];
	// factors will store all the factors of current number
	public static Map<Integer, int[]> factors = new HashMap<Integer, int[]>();
	
	public static void main(String args[]){
		
		//init
		for(int i = 0 ; i < board.length; i++){
			board[i][0] = false;
			board[i][1] = false;
		}
		for(int i = 0 ; i< board[0].length; i++){
			board[0][i] = false;
			board[1][i] = false;
		}
		for(int i = 2; i< board.length; i++){
			for(int j = 2; i< board[0].length; i++){
				board[i][j] = true;
			}
		}
		
		for(int i = 2 ; i < board[0].length; i++){
			factors.put(i, findFactors(i));
		}
		
		//counting;
		int count = (bound-1)*(bound-1);
		for(int a = 2; a <= Math.sqrt((double)board.length) + 1; a++){
			for(int b = 2; b < board[0].length; b++){
				if(factors.get(b) == null) continue;
				//if()
			}
		}

	}
	
	/**
	 * find all factors of the number
	 * @param number integer from 2 to 100;
	 * @return list of factors
	 */
	public static int[] findFactors(int number){
		List<Integer> list = new LinkedList<Integer>();
		for(int i = 2; i<= number/2 ; i++){
			if(number % i ==0)
				list.add(i);
		}
		if(list.size() == 0 ) return null;
		int result[] = new int[list.size()];
		for(int i =0 ;i < list.size(); i++){
			result[i] = list.get(i);
		}
		return result;
	}
}
